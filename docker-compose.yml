services:
  # PostgreSQL Database for User Service
  user-service-db:
    image: postgres:15-alpine
    container_name: user-service-db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${USER_SERVICE_DB_PORT}:5432"
    volumes:
      - user_service_data:/var/lib/postgresql/data
      - ./init-scripts/user-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${USER_SERVICE_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for Project Service
  project-service-db:
    image: postgres:15-alpine
    container_name: project-service-db
    environment:
      POSTGRES_DB: ${PROJECT_SERVICE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PROJECT_SERVICE_DB_PORT}:5432"
    volumes:
      - project_service_data:/var/lib/postgresql/data
      - ./init-scripts/project-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${PROJECT_SERVICE_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for Task Service
  task-service-db:
    image: postgres:15-alpine
    container_name: task-service-db
    environment:
      POSTGRES_DB: ${TASK_SERVICE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${TASK_SERVICE_DB_PORT}:5432"
    volumes:
      - task_service_data:/var/lib/postgresql/data
      - ./init-scripts/task-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${TASK_SERVICE_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      user-service-db:
        condition: service_healthy
      project-service-db:
        condition: service_healthy
      task-service-db:
        condition: service_healthy

volumes:
  user_service_data:
    driver: local
  project_service_data:
    driver: local
  task_service_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
